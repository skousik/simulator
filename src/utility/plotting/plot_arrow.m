function plot_data = plot_arrow(p,varargin)
% plot_arrow(p_end)
% plot_arrow(p_start, p_end)
% plot_arrow(p_start, p_end, 'property1', value1, 'property2', value2,...)
% patch_data = plot_arrow(...)
%
% This function plots a 3-D arrow from the origin to p_end, or else from a
% point p_start to the point p_end; all such points should be passed in as
% 3-by-1 vectors (in \R^3).
%
% This function uses patch to generate the arrow, so it can take in any
% arguments used by patch (as part of the variable length argument list).
% It also can output the data structure generated by patch.
%
% In addition to the standard patch arguments, this method has three of its
% own special property/value arguments:
%   'shaft_width'   the diameter of the cylindrical arrow shaft
%   'head_length'   the length of the conical arrowhead
%   'head_width'    the diameter of the conical arrowhead
%
% EXAMPLE USAGE:
%   figure(1) ; clf ; grid on ; view(3) ; axis equal ;
%
%   % transparent black arrow from origin to (1,1,1)
%   plot_arrow(ones(3,1),'facealpha',0.1)
%
%   % transparent red arrow from (1,2,3) to (4,5,6)
%   plot_arrow([1;2;3],[4;5;6],'shaft_width',0.05,'head_width',0.1,...
%              'facecolor','r','edgecolor','r','facealpha',0.1)
%
% See also: make_arrow_for_patch

    if mod(length(varargin),2) == 1
        p_start = p ;
        p_end = varargin{1} ;
        
        if length(varargin) > 1
            varargin = varargin(2:end) ;
        else
            varargin = {} ;
        end
    else
        p_start = zeros(3,1) ;
        p_end = p ;
    end
    
    % get the arrow-related keywords from varargin
    patch_args_in = {} ;
    plot_args_in = {} ;
    for idx = 1:2:length(varargin)
        switch lower(varargin{idx})
            case {'shaft_width','head_length','head_width'}
                patch_args_in = [patch_args_in, varargin(idx:idx+1)] ;
            otherwise
                plot_args_in = [plot_args_in, varargin(idx:idx+1)] ;
        end
    end
    
    % get arrow plot info
    [F,V] = make_arrow_for_patch(p_start,p_end,patch_args_in{:}) ;
    
    % make patch
    if nargout > 0
        plot_data = patch('Faces',F,'Vertices',V,plot_args_in{:}) ;
    else
        patch('Faces',F,'Vertices',V,plot_args_in{:}) ;
    end
end